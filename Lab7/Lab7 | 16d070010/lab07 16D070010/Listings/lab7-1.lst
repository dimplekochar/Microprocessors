C51 COMPILER V9.59.0.0   LAB7_1                                                            09/24/2018 17:08:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LAB7_1
OBJECT MODULE PLACED IN .\Objects\lab7-1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe lab7-1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\la
                    -b7-1.lst) TABS(2) OBJECT(.\Objects\lab7-1.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          #define sample 1
  10          void SPI_Init();
  11          void LCD_Init();
  12          void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          char int_to_string(int val);
  20          void sample_data(int no_of_samples);
  21          void binary_to_ascii(int binary);
  22          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  23          sbit LCD_rs = P0^0;                 // LCD Register Select
  24          sbit LCD_rw = P0^1;                 // LCD Read/Write
  25          sbit LCD_en = P0^2;                 // LCD Enable
  26          sbit LCD_busy = P2^7;               // LCD Busy Flag
  27          sbit ONULL = P1^0;
  28          bit transmit_completed= 0;              // To check if spi data transmit is complete
  29          bit offset_null = 0;                // Check if offset nulling is enabled
  30          bit roundoff = 0;
  31          unsigned long data1[10]; 
  32          //unsigned long adcVal=0, voltage= 0 , temp_low,temp_high,try0=0;
  33          unsigned long sum = 0,tempadcVal=0;
  34          //unsigned int avgVal=0, initVal=0, adcValue = 0 , temp=0 ;
  35          unsigned long ans=0;
  36          unsigned char serial_data;
  37          unsigned char data_save_high;
  38          unsigned char data_save_low;
  39          unsigned char count=0, i=0;
  40          float fweight=0;
  41          int a=4;
  42            int p=10;
  43            char k;
  44            int j;
  45            unsigned long q;
  46          int x=0;
  47          /**
  48          
  49           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  50           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  51           *                   P1.4(SSbar)
  52                               P1.6(SCK)
  53           */
  54           
C51 COMPILER V9.59.0.0   LAB7_1                                                            09/24/2018 17:08:55 PAGE 2   

  55          void main(void)
  56          {                         
  57   1                          
  58   1        CS_BAR = 1;
  59   1        P1 = P1 | 0x20;
  60   1        SPI_Init();
  61   1        LCD_Init();
  62   1        Timer_Init();
  63   1          TR0= 1;
  64   1        a=4;
  65   1        p=10;
  66   1        while(1){
  67   2        while(1)
  68   2        {
  69   3          CS_BAR = 0;                               // falling edge of CS bar
  70   3          SPDAT= 0x00;                      // first 4 bits will be address of the channel
  71   3          while(!transmit_completed);               // wait for the transmit complete flag  
  72   3          data_save_high = serial_data;               // save the 
  73   3          transmit_completed = 0;                   // make the flag 0
  74   3          SPDAT =0x00;  
  75   3          while(!transmit_completed); 
  76   3          data_save_low = serial_data;
  77   3          transmit_completed = 0; 
  78   3          CS_BAR = 1;    
  79   3          tempadcVal = (data_save_high<<2) + (data_save_low>>6);    // save the 10 bits in one variable
  80   3          if (p==0) break;
  81   3        }
  82   2        P2 = 0x00;
  83   2      p=10; // Make Port 2 output 
  84   2        LCD_Init();
  85   2          q=ans*3.290;
  86   2        LCD_CmdWrite(0x83); 
  87   2          j=q%10;
  88   2          q=q-j;
  89   2          k=j+'0';
  90   2          LCD_DataWrite(k);
  91   2          LCD_CmdWrite(0x82); 
  92   2          j=q%100;
  93   2          j=j/10;
  94   2          q=q-j;
  95   2          k=j+'0';
  96   2          LCD_DataWrite(k);
  97   2          LCD_CmdWrite(0x81); 
  98   2          j=q%1000;
  99   2        j=j/100;
 100   2          q=q-j;
 101   2          k=j+'0';
 102   2          LCD_DataWrite(k);
 103   2          LCD_CmdWrite(0x80); 
 104   2          j=q%10000;
 105   2          j=j/1000;
 106   2          q=q-j;
 107   2          k=j+'0';
 108   2          LCD_DataWrite(k);
 109   2          LCD_CmdWrite(0x086);  
 110   2          LCD_StringWrite("mV", 2);
 111   2          //delay_ms(5000);
 112   2        }}
 113          
 114          /**
 115           * FUNCTION_PURPOSE:interrupt
 116           * FUNCTION_INPUTS: void
C51 COMPILER V9.59.0.0   LAB7_1                                                            09/24/2018 17:08:55 PAGE 3   

 117           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
 118           */
 119          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
 120          {
 121   1        switch  ( SPSTA )         /* read and clear spi status register */
 122   1        {
 123   2          case 0x80:  
 124   2            serial_data=SPDAT;   /* read receive data */
 125   2            transmit_completed=1;/* set software flag */
 126   2          break;
 127   2      
 128   2          case 0x10:
 129   2            
 130   2          break;
 131   2        
 132   2          case 0x40:
 133   2          break;
 134   2        }
 135   1      }
 136          
 137          void timer0_ISR (void) interrupt 1
 138          {                         TR0= 0;
 139   1                                TMOD=0x01;
 140   1                                TH0=0x0EC;
 141   1                                TL0=0x078;
 142   1                                a--;  
 143   1                               
 144   1                                if (a==0) {
 145   2                                  a=4;
 146   2                                  p--;
 147   2                                  data1[p]=tempadcVal;
 148   2                                }
 149   1                                
 150   1                                if (p==0){
 151   2                                  
 152   2                                  a=4;
 153   2                                  
 154   2                                for (x=0; x<10; x=x+1){
 155   3                                  ans=ans+data1[x];
 156   3                                }   
 157   2                                  ans=ans/10;}
 158   1        //Initialize TH0
 159   1        //Initialize TL0
 160   1        //Increment Overflow 
 161   1        //Write averaging of 10 samples code here
 162   1       TR0= 1;
 163   1      }
 164          
 165          /**
 166          
 167           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 168           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 169           *                   P1.4(SSbar)
 170                               P1.6(SCK)
 171           */ 
 172          void SPI_Init()
 173          {
 174   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 175   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 176   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 177   1        SPCON |= 0x10;                  // Master mode 
 178   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
C51 COMPILER V9.59.0.0   LAB7_1                                                            09/24/2018 17:08:55 PAGE 4   

 179   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 180   1        IEN1 |= 0x04;                   // enable spi interrupt 
 181   1        EA=1;                           // enable interrupts 
 182   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 183   1      //  IPH0 |=0x10;
 184   1      //  IPL0 |=0x10;
 185   1      }
 186          
 187          void Timer_Init(void)
 188          {
 189   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 190   1        // 65536 depending upon the calues of TH0 and TL0
 191   1        // The timer counts 65536 processor cycles. A processor cycle is 
 192   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 193   1          
 194   1        //Initialize TH0
 195   1        //Initialize TL0
 196   1        //Configure TMOD 
 197   1        //Set ET0
 198   1        //Set TR0
 199   1        
 200   1                                TMOD=0x01;
 201   1                                TH0=0x0EC;
 202   1                                TL0=0x078;
 203   1                                ET0=1;
 204   1                                EA=1;
 205   1        
 206   1      }
 207          /**
 208           * FUNCTION_PURPOSE:LCD Initialization
 209           * FUNCTION_INPUTS: void
 210           * FUNCTION_OUTPUTS: none
 211           */
 212          void LCD_Init()
 213          {
 214   1        sdelay(100);
 215   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 216   1        LCD_CmdWrite(0x0C);     // Display ON cursor ON  Blinking off
 217   1        LCD_CmdWrite(0x01);     // Clear the LCD
 218   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 219   1      }
 220          
 221          /**
 222           * FUNCTION_PURPOSE: Write Command to LCD
 223           * FUNCTION_INPUTS: cmd- command to be written
 224           * FUNCTION_OUTPUTS: none
 225           */
 226          void LCD_CmdWrite(char cmd)
 227          {
 228   1        LCD_Ready();
 229   1        LCD_data=cmd;           // Send the command to LCD
 230   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 231   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 232   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 233   1        sdelay(5);
 234   1        LCD_en=0;
 235   1        sdelay(5);
 236   1      }
 237          
 238          /**
 239           * FUNCTION_PURPOSE: Write Command to LCD
 240           * FUNCTION_INPUTS: dat- data to be written
C51 COMPILER V9.59.0.0   LAB7_1                                                            09/24/2018 17:08:55 PAGE 5   

 241           * FUNCTION_OUTPUTS: none
 242           */
 243          void LCD_DataWrite( char dat)
 244          {
 245   1        LCD_Ready();
 246   1        LCD_data=dat;           // Send the data to LCD
 247   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 248   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 249   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 250   1        sdelay(5);
 251   1        LCD_en=0;
 252   1        sdelay(5);
 253   1      }
 254          /**
 255           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 256           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 257                              2. length - length of the array
 258           * FUNCTION_OUTPUTS: none
 259           */
 260          void LCD_StringWrite( char * str, unsigned char length)
 261          {
 262   1          while(length>0)
 263   1          {
 264   2              LCD_DataWrite(*str);
 265   2              str++;
 266   2              length--;
 267   2          }
 268   1      }
 269          
 270          /**
 271           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 272           * FUNCTION_INPUTS: void
 273           * FUNCTION_OUTPUTS: none
 274           */
 275          void LCD_Ready()
 276          {
 277   1        LCD_data = 0xFF;
 278   1        LCD_rs = 0;
 279   1        LCD_rw = 1;
 280   1        LCD_en = 0;
 281   1        sdelay(5);
 282   1        LCD_en = 1;
 283   1      //  while(LCD_busy == 1)
 284   1      //  {
 285   1      //    LCD_en = 0;
 286   1      //    LCD_en = 1;
 287   1      //  }
 288   1        LCD_en = 0;
 289   1      }
 290          
 291          /**
 292           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 293           * FUNCTION_INPUTS: void
 294           * FUNCTION_OUTPUTS: none
 295           */
 296          void sdelay(int delay)
 297          {
 298   1        char d=0;
 299   1        while(delay>0)
 300   1        {
 301   2          for(d=0;d<5;d++);
 302   2          delay--;
C51 COMPILER V9.59.0.0   LAB7_1                                                            09/24/2018 17:08:55 PAGE 6   

 303   2        }
 304   1      }
 305          
 306          /**
 307           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 308           * FUNCTION_INPUTS: void
 309           * FUNCTION_OUTPUTS: none
 310           */
 311          void delay_ms(int delay)
 312          {
 313   1        int d=0;
 314   1        while(delay>0)
 315   1        {
 316   2          for(d=0;d<382;d++);
 317   2          delay--;
 318   2        }
 319   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    833    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     74       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
