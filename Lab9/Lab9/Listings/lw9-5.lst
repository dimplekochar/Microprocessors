C51 COMPILER V9.59.0.0   LW9_5                                                             10/20/2018 17:43:59 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LW9_5
OBJECT MODULE PLACED IN .\Objects\lw9-5.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe lw9-5.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lw9
                    --5.lst) TABS(2) OBJECT(.\Objects\lw9-5.obj)

line level    source

   1          //Generate waveform at P3_6
   2          
   3          #include "at89c5131.h"
   4          #include "stdio.h"
   5          #define sample 1
   6          void SPI_Init();
   7          void sdelay(int delay);
   8          void delay_ms(int delay);
   9          bit transmit_completed= 0;  
  10          sbit CS_BAR = P3^4;                 // Chip Select for the ADC
  11          sbit FS=P3^5;
  12          sbit led1=P1^4;
  13          sbit led2=P1^5;
  14          void timer_init();
  15          unsigned char serial_data;
  16          sbit C0 = P1^7; 
  17          char high=239,low=190;
  18          int m=0;              
  19          
  20          
  21          
  22          
  23          int x=40;
  24          
  25          unsigned char count=0, i=2;
  26          char test [] = {0xEF,0xBE,  0xF1,0x8C,  0xF2,0xFE,  0xF3,0xCE,
  27                          0xF5,0x29,  0xF6,0x3F,  0xF7,0x50,  0xF7,0xDF,
  28                          0xF7,0xDF,  0xF7,0x50,  0xF6,0x3F,  0xF5,0x29,
  29                          0xF3,0xCE,  0xF2,0xFE,  0xF1,0x8C,  0xEF,0xBE 
  30                          
  31          };
  32          
  33                          
  34                            
  35           
  36          void main(void)
  37          {
  38   1        FS=1;
  39   1        CS_BAR = 1;
  40   1        SPI_Init();
  41   1        timer_init();
  42   1        TR0=1;
  43   1        TR1=1;
  44   1        while(1)
  45   1        { while(m==0){
  46   3          CS_BAR = 0;                               // falling edge of CS bar
  47   3          FS=0;
  48   3          SPDAT= 0x0F;                      // first 4 bits will be address of the channel
  49   3          while(!transmit_completed);               // wait for the transmit complete flag    
  50   3          transmit_completed = 0; 
  51   3          SPDAT= 0xFF;                      // first 4 bits will be address of the channel
  52   3          while(!transmit_completed);               // wait for the transmit complete flag    
  53   3          transmit_completed = 0; 
  54   3          FS=1; 
C51 COMPILER V9.59.0.0   LW9_5                                                             10/20/2018 17:43:59 PAGE 2   

  55   3          CS_BAR = 1; 
  56   3        }
  57   2        while(m==1){
  58   3        CS_BAR = 0;                               // falling edge of CS bar
  59   3          FS=0;
  60   3          SPDAT= 0x00;                      // first 4 bits will be address of the channel
  61   3        while(!transmit_completed);               // wait for the transmit complete flag    
  62   3          transmit_completed = 0; 
  63   3          SPDAT= 0x00;                      // first 4 bits will be address of the channel
  64   3        while(!transmit_completed);               // wait for the transmit complete flag    
  65   3          transmit_completed = 0; 
  66   3          FS=1; 
  67   3          CS_BAR = 1; 
  68   3        
  69   3        }
  70   2          
  71   2        }
  72   1      }
  73          
  74          
  75          void timer_init()
  76          {
  77   1       TMOD=0x11;   
  78   1       TL1 =190;  
  79   1       TH1 =239;    
  80   1       TL0 =0x61;     
  81   1       TH0 =0x3C;
  82   1        EA=1;
  83   1        ET0=1;
  84   1        ET1=1;
  85   1        TR0=1;
  86   1        //TR1=1;
  87   1        
  88   1      } 
  89          
  90          
  91          void TIMER1_ISR (void) interrupt 3
  92          {
  93   1      
  94   1        TR1=0;
  95   1        TL1 = low ;
  96   1        TH1 = high;
  97   1      led2=~led2;
  98   1        TR1=1;
  99   1        m=1-m;
 100   1        
 101   1      }
 102          
 103          void TIMER0_ISR (void) interrupt 1
 104          
 105          {
 106   1        TR0=0;
 107   1        TL0 =0x61;
 108   1        TH0 =0x3C;
 109   1        x--;
 110   1        if(x==0)
 111   1        {
 112   2            if(i==32)
 113   2          {
 114   3            TR0=0;
 115   3            TR1=0;
 116   3          }
C51 COMPILER V9.59.0.0   LW9_5                                                             10/20/2018 17:43:59 PAGE 3   

 117   2          else
 118   2          {
 119   3          led1=~led1;
 120   3          high= test[i];
 121   3          low= test[i+1];
 122   3        i=i+2;
 123   3          x=40;
 124   3        TR1=1;
 125   3          }
 126   2        }
 127   1        
 128   1        TR0=1;
 129   1      
 130   1        
 131   1      }
 132          
 133          void SPI_Init()
 134          {
 135   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 136   1        FS=1;
 137   1        SPCON |= 0x75;                  // CPHA=1; transmit mode example 
 138   1      //  SPCON |= 0x01;                  // CPHA=1; transmit mode example 
 139   1      //  SPCON |= 0x10;                  // CPHA=1; transmit mode example 
 140   1      //  SPCON &= ~0x08;                 // CPHA=1; transmit mode example 
 141   1      //  SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 142   1        IEN1 |= 0x04;                   // enable spi interrupt 
 143   1        EA=1;                           // enable interrupts 
 144   1      //  SPCON |= 0x40;                  // CPHA=1; transmit mode example 
 145   1      //  SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 146   1      //  IPH0 |=0x10;
 147   1      //  IPL0 |=0x10;
 148   1      }
 149          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
 150          {
 151   1        switch  ( SPSTA )         /* read and clear spi status register */
 152   1        {
 153   2          case 0x80:  
 154   2            serial_data=SPDAT;   /* read receive data */
 155   2            transmit_completed=1;/* set software flag */
 156   2          break;
 157   2      
 158   2          case 0x10:
 159   2            
 160   2          break;
 161   2        
 162   2          case 0x40:
 163   2          break;
 164   2        }
 165   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    259    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     41    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
